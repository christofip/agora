
  You are an expert in Python, Django, and scalable web application development.

  Key Principles
  - Write clear, technical responses with precise Django examples.
  - Use Django's built-in features and tools wherever possible to leverage its full capabilities.
  - Prioritize readability and maintainability; follow Django's coding style guide (PEP 8 compliance).
  - Use descriptive variable and function names; adhere to naming conventions (e.g., lowercase with underscores for functions and variables).
  - Structure your project in a modular way using Django apps to promote reusability and separation of concerns.

  Django/Python
  - Use Django’s class-based views (CBVs) for more complex views; prefer function-based views (FBVs) for simpler logic.
  - Leverage Django’s ORM for database interactions; avoid raw SQL queries unless necessary for performance.
  - Utilize Django's form and model form classes for form handling and validation.
  - Follow the MVT (Model-View-Template) pattern strictly for clear separation of concerns.

  Error Handling and Validation
  - Implement error handling at the view level and use Django's built-in error handling mechanisms.
  - Use Django's validation framework to validate form and model data.
  - Prefer try-except blocks for handling exceptions in business logic and views.
  - Customize error pages (e.g., 404, 500) to improve user experience and provide helpful information.
  - Use Django signals to decouple error handling and logging from core business logic.

  Dependencies
  - Django

  Django-Specific Guidelines
  - Use Django templates for rendering HTML and DRF serializers for JSON responses.
  - Keep business logic in models and forms; keep views light and focused on request handling.
  - Use Django's URL dispatcher (urls.py) to define clear and RESTful URL patterns.
  - Use Django’s built-in tools for testing (unittest and pytest-django) to ensure code quality and reliability.
  - Leverage Django’s caching framework to optimize performance for frequently accessed data.

  Performance Optimization
  - Use asynchronous views and background tasks (via Celery) for I/O-bound or long-running operations.

  Key Conventions
  1. Follow Django's "Convention Over Configuration" principle for reducing boilerplate code.
  2. Maintain a clear and logical project structure to enhance readability and maintainability.
  
  Refer to Django documentation for best practices in views, models, forms, and security considerations.
  
  The directory contains pdf files, each corresponding to proceedings of a Cypriot parliamentary session. The end web application will enable users to select a session, view its summary and ask questions about what was discussed.

Aim:
Build a web application to help users understand parliamentary proceedings, decisions and MP performance. This relates to Cypriot parliamentary sessions that are conducted in Greek.

Features
In decreasing importance of features, the web applications should allow users to:
1. Select a parliamentary session
2. Get a short summary of that session’s proceedings, key points of agreements and disagreements and key voting results.
3. Ask questions and get answers about the contents of the parliamentary session
4. MP data - what member of parliement spoke and a summary of what they said.

Parliamentary proceedings are found in pdfs in the directory.

Use Gemini if you need to call LLMs
Use python3.

Use this structure

agora/
│
├── manage.py
├── requirements.txt
├── .gitignore
│
├── config/                     # Project configuration
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── asgi.py
│   └── wsgi.py
│
├── proceedings/               # Main application
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── views.py
│   ├── urls.py
│   ├── forms.py
│   ├── services/             # Business logic
│   │   ├── __init__.py
│   │   ├── pdf_processor.py  # PDF handling
│   │   ├── summarizer.py     # Session summarization
│   │   └── qa_service.py     # Q&A functionality
│   │
│   ├── templates/
│   │   └── proceedings/
│   │       ├── base.html
│   │       ├── session_list.html
│   │       ├── session_detail.html
│   │       └── session_qa.html
│   │
│   └── tests/
│       ├── __init__.py
│       ├── test_models.py
│       ├── test_views.py
│       └── test_services.py
│
├── static/
│   ├── css/
│   ├── js/
│   └── images/
│
└── media/
    └── pdf_documents/        # Parliamentary PDFs storage